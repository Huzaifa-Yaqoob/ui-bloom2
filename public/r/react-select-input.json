{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "react-select-input",
  "type": "registry:ui",
  "title": "React Select",
  "description": "A customizable select component built with react-select that integrates seamlessly with shadcn/ui, supporting multi-select, form validation, and dynamic option creation.",
  "dependencies": [
    "react-select@5.10.1"
  ],
  "files": [
    {
      "path": "src/registry/components/react-select-input/react-select-input.tsx",
      "content": "'use client';\n\nimport React, { memo, useMemo } from 'react';\nimport { ComponentProps } from 'react';\nimport { X, ChevronDown, Loader } from 'lucide-react';\nimport dynamic from 'next/dynamic';\nimport { cn } from '@/lib/utils';\nimport {\n  components,\n  OptionsOrGroups,\n  GroupBase,\n  ClearIndicatorProps,\n  DropdownIndicatorProps,\n  MultiValueRemoveProps,\n  ClassNamesConfig,\n  MenuListProps,\n  ControlProps,\n  PlaceholderProps,\n  MenuProps,\n  OptionProps,\n  ValueContainerProps,\n  MultiValueProps,\n  GroupHeadingProps,\n} from 'react-select';\n\nconst Select = dynamic(() => import('react-select'), { ssr: false });\n\nconst AsyncSelect = dynamic(() => import('react-select/async'), { ssr: false });\n\nconst CreatableSelect = dynamic(() => import('react-select/creatable'), {\n  ssr: false,\n});\n\nconst AsyncCreatableSelect = dynamic(\n  () => import('react-select/async-creatable'),\n  {\n    ssr: false,\n  }\n);\n\ninterface MyOption {\n  [key: string]: unknown;\n}\n\ntype MyOptions = OptionsOrGroups<MyOption, GroupBase<MyOption>> | undefined;\ntype ReactSelectProps = ComponentProps<typeof Select>;\ntype ReactCreatableSelectProps = ComponentProps<typeof CreatableSelect>;\ntype ReactAsyncSelectProps = ComponentProps<typeof AsyncSelect>;\ntype ReactAsyncCreatableSelectProps = ComponentProps<\n  typeof AsyncCreatableSelect\n>;\n\nconst customClassNames = {\n  menuList: 'space-y-1',\n  placeholder: 'text-muted-foreground',\n  control:\n    'focus-visible:ring-[3px] selection:bg-primary selection:text-primary-foreground rounded-md bg-transparent dark:bg-input/30 border border-input p-2 text-base shadow-xs transition-[color,box-shadow] focus-within:ring-[3px] focus-within:ring-ring/50 focus-within:border-ring max-h-32 overflow-y-scroll no-scrollbar ',\n  menu: 'bg-accent rounded-md px-4 py-2 shadow-md',\n  clearIndicator:\n    'text-destructive/50 hover:text-destructive/80 cursor-pointer',\n  option: 'hover:bg-accent-foreground/50 p-1 rounded',\n  focusedOption: 'bg-accent-foreground/50',\n  selectedOption: 'bg-accent-foreground text-accent',\n  dropdownIndicator: 'text-foreground/50 cursor-pointer',\n  multiValue: 'bg-accent px-1 rounded-sm',\n  valueContainer: 'flex gap-2',\n  multiValueRemove: 'ml-1',\n  groupHeading: 'text-sm text-muted-foreground',\n  areaInvalid:\n    'focus-visible:ring-destructive/20 border-destructive dark:ring-destructive/40 focus-within:ring-destructive/20 focus-within:border-destructive dark:focus-within:ring-destructive/40',\n  areaValid: 'focus-visible:border-ring focus-visible:ring-ring/50',\n  disabled: 'opacity-50 cursor-not-allowed pointer-events-none',\n};\n\nconst ReactSelect = memo(function ReactSelect({\n  classNames = {},\n  options,\n  components = {},\n  ...selectProps\n}: ReactSelectProps) {\n  const {\n    ClearIndicator,\n    DropdownIndicator,\n    LoadingIndicator,\n    MultiValueRemove,\n    ...otherComponents\n  } = components;\n\n  const mergedComponents = useMemo(\n    () => ({\n      ClearIndicator: ClearIndicator || CustomClearIndicator,\n      LoadingIndicator: LoadingIndicator || CustomLoadingIndicator,\n      DropdownIndicator: DropdownIndicator || CustomDropdownIndicator,\n      MultiValueRemove: MultiValueRemove || CustomMultiValueRemove,\n      ...otherComponents,\n    }),\n    [\n      ClearIndicator,\n      LoadingIndicator,\n      DropdownIndicator,\n      MultiValueRemove,\n      otherComponents,\n    ]\n  );\n\n  const mergedClassNames = useMemo(\n    () => getClassNames(classNames),\n    [classNames]\n  );\n\n  return (\n    <Select\n      unstyled\n      {...selectProps}\n      options={options}\n      components={mergedComponents}\n      classNames={mergedClassNames}\n    />\n  );\n});\n\nconst ReactAsyncSelect = memo(function ReactAsyncSelect({\n  classNames = {},\n  options,\n  components = {},\n  ...selectProps\n}: ReactAsyncSelectProps) {\n  const {\n    ClearIndicator,\n    DropdownIndicator,\n    LoadingIndicator,\n    MultiValueRemove,\n    ...otherComponents\n  } = components;\n\n  const mergedComponents = useMemo(\n    () => ({\n      ClearIndicator: ClearIndicator || CustomClearIndicator,\n      LoadingIndicator: LoadingIndicator || CustomLoadingIndicator,\n      DropdownIndicator: DropdownIndicator || CustomDropdownIndicator,\n      MultiValueRemove: MultiValueRemove || CustomMultiValueRemove,\n      ...otherComponents,\n    }),\n    [\n      ClearIndicator,\n      LoadingIndicator,\n      DropdownIndicator,\n      MultiValueRemove,\n      otherComponents,\n    ]\n  );\n\n  const mergedClassNames = useMemo(\n    () => getClassNames(classNames),\n    [classNames]\n  );\n\n  return (\n    <AsyncSelect\n      unstyled\n      {...selectProps}\n      options={options}\n      components={mergedComponents}\n      classNames={mergedClassNames}\n    />\n  );\n});\n\nconst ReactCreatableSelect = memo(function ReactCreatableSelect({\n  classNames = {},\n  options,\n  components = {},\n  ...selectProps\n}: ReactCreatableSelectProps) {\n  const {\n    ClearIndicator,\n    DropdownIndicator,\n    LoadingIndicator,\n    MultiValueRemove,\n    ...otherComponents\n  } = components;\n\n  const mergedComponents = useMemo(\n    () => ({\n      ClearIndicator: ClearIndicator || CustomClearIndicator,\n      LoadingIndicator: LoadingIndicator || CustomLoadingIndicator,\n      DropdownIndicator: DropdownIndicator || CustomDropdownIndicator,\n      MultiValueRemove: MultiValueRemove || CustomMultiValueRemove,\n      ...otherComponents,\n    }),\n    [\n      ClearIndicator,\n      LoadingIndicator,\n      DropdownIndicator,\n      MultiValueRemove,\n      otherComponents,\n    ]\n  );\n\n  const mergedClassNames = useMemo(\n    () => getClassNames(classNames),\n    [classNames]\n  );\n\n  return (\n    <CreatableSelect\n      unstyled\n      {...selectProps}\n      options={options}\n      components={mergedComponents}\n      classNames={mergedClassNames}\n    />\n  );\n});\n\nconst ReactAsyncCreatableSelect = memo(function ReactAsyncCreatableSelect({\n  classNames = {},\n  options,\n  components = {},\n  ...selectProps\n}: ReactAsyncCreatableSelectProps) {\n  const {\n    ClearIndicator,\n    DropdownIndicator,\n    LoadingIndicator,\n    MultiValueRemove,\n    ...otherComponents\n  } = components;\n\n  const mergedComponents = useMemo(\n    () => ({\n      ClearIndicator: ClearIndicator || CustomClearIndicator,\n      LoadingIndicator: LoadingIndicator || CustomLoadingIndicator,\n      DropdownIndicator: DropdownIndicator || CustomDropdownIndicator,\n      MultiValueRemove: MultiValueRemove || CustomMultiValueRemove,\n      ...otherComponents,\n    }),\n    [\n      ClearIndicator,\n      LoadingIndicator,\n      DropdownIndicator,\n      MultiValueRemove,\n      otherComponents,\n    ]\n  );\n\n  const mergedClassNames = useMemo(\n    () => getClassNames(classNames),\n    [classNames]\n  );\n\n  return (\n    <AsyncCreatableSelect\n      unstyled\n      {...selectProps}\n      options={options}\n      components={mergedComponents}\n      classNames={mergedClassNames}\n    />\n  );\n});\n\nfunction getClassNames(\n  classNames: ClassNamesConfig<unknown, boolean, GroupBase<unknown>>\n) {\n  const {\n    menuList,\n    placeholder,\n    control,\n    menu,\n    clearIndicator,\n    option,\n    dropdownIndicator,\n    multiValue,\n    valueContainer,\n    multiValueRemove,\n    groupHeading,\n    ...otherClasses\n  } = classNames;\n\n  return {\n    control: (props: ControlProps<unknown, boolean, GroupBase<unknown>>) =>\n      cn(\n        customClassNames.control,\n        props?.selectProps?.['aria-invalid']\n          ? customClassNames.areaInvalid\n          : customClassNames.areaValid,\n        props.selectProps.isDisabled ? customClassNames.disabled : '',\n        control?.(props) && ''\n      ),\n    placeholder: (\n      props: PlaceholderProps<unknown, boolean, GroupBase<unknown>>\n    ) => cn(customClassNames.placeholder, placeholder?.(props) && ''),\n    menu: (props: MenuProps<unknown, boolean, GroupBase<unknown>>) =>\n      cn(customClassNames.menu, menu?.(props) && ''),\n    menuList: (props: MenuListProps<unknown, boolean, GroupBase<unknown>>) =>\n      cn(customClassNames.menuList, menuList?.(props) && ''),\n    option: (props: OptionProps<unknown, boolean, GroupBase<unknown>>) =>\n      cn(\n        customClassNames.option,\n        props.isSelected ? customClassNames.selectedOption : '',\n        props.isFocused ? customClassNames.focusedOption : '',\n        option?.(props) && ''\n      ),\n    dropdownIndicator: (\n      props: DropdownIndicatorProps<unknown, boolean, GroupBase<unknown>>\n    ) =>\n      cn(customClassNames.dropdownIndicator, dropdownIndicator?.(props) && ''),\n    clearIndicator: (\n      props: ClearIndicatorProps<unknown, boolean, GroupBase<unknown>>\n    ) => cn(customClassNames.clearIndicator, clearIndicator?.(props) ?? ''),\n    valueContainer: (\n      props: ValueContainerProps<unknown, boolean, GroupBase<unknown>>\n    ) => cn(customClassNames.valueContainer, valueContainer?.(props) ?? ''),\n    multiValue: (\n      props: MultiValueProps<unknown, boolean, GroupBase<unknown>>\n    ) => cn(customClassNames.multiValue, multiValue?.(props) ?? ''),\n    multiValueRemove: (\n      props: MultiValueProps<unknown, boolean, GroupBase<unknown>>\n    ) => cn(customClassNames.multiValue, multiValueRemove?.(props) && ''),\n    groupHeading: (\n      props: GroupHeadingProps<unknown, boolean, GroupBase<unknown>>\n    ) => cn(customClassNames.groupHeading, groupHeading?.(props) ?? ''),\n    ...otherClasses,\n  };\n}\n\n// custom docs\nfunction CustomClearIndicator(props: ClearIndicatorProps) {\n  return (\n    <components.ClearIndicator {...props}>\n      <X size={18} />\n    </components.ClearIndicator>\n  );\n}\n\nfunction CustomDropdownIndicator(props: DropdownIndicatorProps) {\n  const { selectProps } = props;\n  return (\n    <components.DropdownIndicator {...props}>\n      <ChevronDown\n        size={18}\n        className={\n          'transition-transform ' + (selectProps.menuIsOpen ? 'rotate-180' : '')\n        }\n      />\n    </components.DropdownIndicator>\n  );\n}\n\nfunction CustomLoadingIndicator() {\n  return <Loader size={18} className=\"animate-spin\" />;\n}\n\nfunction CustomMultiValueRemove(props: MultiValueRemoveProps) {\n  return (\n    <components.MultiValueRemove {...props}>\n      <X size={14} className=\"hover:text-destructive cursor-pointer\" />\n    </components.MultiValueRemove>\n  );\n}\n\n// helper functions\nconst map = new Map();\n\nfunction flattenOptions(options: Exclude<MyOptions, undefined>): MyOption[] {\n  const jsonOptions = JSON.stringify(options);\n  if (map.has(jsonOptions)) {\n    return map.get(jsonOptions) as MyOption[];\n  }\n  const flatOptions = options.flatMap((option) =>\n    option.options ? option.options : option\n  );\n  map.set(jsonOptions, flatOptions);\n  return flatOptions as MyOption[];\n}\n\nfunction convertToOptions(\n  value: string[],\n  options: Exclude<MyOptions, undefined>,\n  valueField: string = 'value'\n) {\n  let selectedOptions = [];\n  const flatOptions = flattenOptions(options);\n  selectedOptions = value.map((v) => {\n    return flatOptions.filter((o) => o[valueField] === v)[0];\n  });\n\n  return selectedOptions;\n}\n\nfunction convertToOption(\n  value: string,\n  options: Exclude<MyOptions, undefined>,\n  valueField: string = 'value'\n) {\n  if (!value) {\n    return null;\n  }\n  const flatOptions = flattenOptions(options);\n  return flatOptions.filter((o) => o[valueField] === value)[0];\n}\n\nfunction getFields(field: string, selectedOptions: MyOption[] | undefined) {\n  if (selectedOptions) {\n    return selectedOptions.map((so) => so[field]);\n  }\n  return [];\n}\n\nexport {\n  ReactSelect,\n  ReactAsyncSelect,\n  ReactCreatableSelect,\n  ReactAsyncCreatableSelect,\n  convertToOptions,\n  getFields,\n  flattenOptions,\n  convertToOption,\n  type MyOption,\n  type MyOptions,\n};\n",
      "type": "registry:ui",
      "target": "components/ui-bloom/react-select-input.tsx"
    }
  ],
  "css": {
    "@layer utilities": {
      ".no-scrollbar": {
        "scrollbar-width": "none",
        "-ms-overflow-style": "none"
      },
      ".no-scrollbar::-webkit-scrollbar": {
        "display": "none"
      }
    }
  }
}