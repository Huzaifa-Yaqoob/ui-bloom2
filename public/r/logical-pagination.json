{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "logical-pagination",
  "type": "registry:ui",
  "title": "Logical Pagination",
  "description": "A password input field with a toggle option to show or hide the password.",
  "files": [
    {
      "path": "src/registry/components/logical-pagination/logical-pagination.tsx",
      "content": "'use client';\n\nimport { useMemo, memo, ComponentProps, FC } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Ellipsis, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { useWindowWidth, BreakPoints } from '../hooks/useWindowWidth';\nimport { cn } from '@/lib/utils';\n\ninterface LogicalPaginationProps {\n  size?: Partial<typeof BreakPoints>;\n  totalPages: number;\n  currentPage: number;\n  isPrev?: boolean;\n  isNext?: boolean;\n  onPageChange: (page: number) => void;\n  className?: string;\n\n  PreviousComponent?: FC<ComponentProps<'button'>>;\n  NextComponent?: FC<ComponentProps<'button'>>;\n  GapPlaceholderComponent?: FC;\n  PageNumberComponent?: FC<PageNumberProps>;\n}\n\ninterface PageNumberProps extends ComponentProps<'button'> {\n  isActive: boolean;\n  num: number;\n}\n\nconst logicalPaginationDefaultProps = {\n  size: {\n    sm: 5,\n  },\n  isPrev: true,\n  isNext: true,\n};\n\nfunction LogicalPaginationComponent(props: LogicalPaginationProps) {\n  const {\n    size,\n    totalPages,\n    currentPage,\n    isPrev,\n    isNext,\n    onPageChange,\n    className,\n    PreviousComponent = DefaultPrevious,\n    NextComponent = DefaultNext,\n    GapPlaceholderComponent = DefaultGapPlaceholder,\n    PageNumberComponent = DefaultPageNumber,\n  } = {\n    ...logicalPaginationDefaultProps,\n    ...props,\n  };\n\n  const width = useWindowWidth();\n\n  const visiblePages = useMemo(() => {\n    if (!width) return size?.sm ?? 5;\n\n    const getClosestSize = (...keys: (keyof typeof BreakPoints)[]): number => {\n      for (const key of keys) {\n        const k = key as keyof LogicalPaginationProps['size'];\n        if (size?.[k] != null) return size[k]!;\n      }\n      return 5;\n    };\n\n    if (width < BreakPoints.md) return getClosestSize('sm');\n    if (width < BreakPoints.lg) return getClosestSize('md', 'sm');\n    if (width < BreakPoints.xl) return getClosestSize('lg', 'md', 'sm');\n    if (width < BreakPoints['2xl'])\n      return getClosestSize('xl', 'lg', 'md', 'sm');\n    return getClosestSize('2xl', 'xl', 'lg', 'md', 'sm');\n  }, [width, size]);\n\n  const pageNumbers = useMemo(() => {\n    const pages: number[] = [];\n\n    if (visiblePages <= 1) {\n      pages.push(currentPage);\n      return pages;\n    }\n\n    if (visiblePages === 2) {\n      if (currentPage === totalPages) {\n        if (currentPage - 1 >= 1) pages.push(currentPage - 1);\n        pages.push(currentPage);\n      } else {\n        pages.push(currentPage, currentPage + 1);\n      }\n      return pages;\n    }\n\n    if (totalPages <= visiblePages) {\n      for (let i = 1; i <= totalPages; i++) pages.push(i);\n      return pages;\n    }\n\n    const numbersToShow = visiblePages - 2;\n    const halfVisible = Math.floor(numbersToShow / 2);\n\n    let startPage = Math.max(2, currentPage - halfVisible);\n    let endPage = Math.min(totalPages - 1, startPage + numbersToShow - 1);\n\n    if (endPage === totalPages - 1) {\n      startPage = Math.max(2, endPage - numbersToShow + 1);\n    }\n\n    if (startPage === 2) {\n      endPage = Math.min(totalPages - 1, startPage + numbersToShow - 1);\n    }\n\n    pages.push(1);\n\n    if (startPage > 2) {\n      pages.push(-1);\n    }\n\n    for (let i = startPage; i <= endPage; i++) {\n      pages.push(i);\n    }\n\n    // Add end ellipsis if needed\n    if (endPage < totalPages - 1) {\n      pages.push(-1);\n    }\n\n    pages.push(totalPages);\n\n    return pages;\n  }, [currentPage, totalPages, visiblePages]);\n\n  return (\n    <div className={cn('flex flex-wrap items-center gap-2', className)}>\n      {isPrev && (\n        <PreviousComponent\n          onClick={() => onPageChange(Math.max(1, currentPage - 1))}\n        />\n      )}\n      {pageNumbers.map((num, idx) =>\n        num === -1 ? (\n          <GapPlaceholderComponent key={`gap-${idx}`} />\n        ) : (\n          <PageNumberComponent\n            key={num}\n            num={num}\n            isActive={num === currentPage}\n            onClick={() => onPageChange(num)}\n          />\n        )\n      )}\n      {isNext && (\n        <NextComponent\n          onClick={() => onPageChange(Math.min(totalPages, currentPage + 1))}\n        />\n      )}\n    </div>\n  );\n}\n\n// --- Default Components ---\n\nconst DefaultPageNumber: FC<PageNumberProps> = ({\n  num,\n  isActive,\n  ...props\n}) => (\n  <Button variant={isActive ? 'default' : 'outline'} size=\"sm\" {...props}>\n    {num}\n  </Button>\n);\n\nconst DefaultGapPlaceholder: FC<ComponentProps<'button'>> = (props) => (\n  <Button variant=\"ghost\" size=\"sm\" disabled {...props}>\n    <Ellipsis />\n  </Button>\n);\n\nconst DefaultPrevious: FC<ComponentProps<'button'>> = (props) => (\n  <Button variant=\"outline\" size=\"sm\" {...props}>\n    <ChevronLeft />\n  </Button>\n);\n\nconst DefaultNext: FC<ComponentProps<'button'>> = (props) => (\n  <Button variant=\"outline\" size=\"sm\" {...props}>\n    <ChevronRight />\n  </Button>\n);\n\n// memorizing\nconst LogicalPagination = memo(LogicalPaginationComponent);\n\nexport { LogicalPagination, type PageNumberProps };\n",
      "type": "registry:ui",
      "target": "components/ui/bloom/logical-pagination.tsx"
    },
    {
      "path": "src/registry/hooks/useWindowWidth.ts",
      "content": "'use client';\n\nimport { useState, useEffect } from 'react';\n\nconst useWindowWidth = (): number | undefined => {\n  const [width, setWidth] = useState<number | undefined>(undefined);\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const handleResize = () => {\n      setWidth(window.innerWidth);\n    };\n\n    handleResize();\n\n    window.addEventListener('resize', handleResize);\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return width;\n};\n\n// custom breakpoints for screen to make component responsive\nconst BreakPoints = {\n  sm: 640,\n  md: 768,\n  lg: 1024,\n  xl: 1280,\n  '2xl': 1536,\n};\n\nexport { useWindowWidth, BreakPoints };\n",
      "type": "registry:hook"
    }
  ]
}