{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typography",
  "type": "registry:ui",
  "title": "Typography",
  "description": "A comprehensive set of typography components including headings (H1-H6), paragraphs, blockquotes, code blocks, and text variants with responsive sizing and styling.",
  "files": [
    {
      "path": "src/registry/components/typography/typography.tsx",
      "content": "import { Slot } from '@radix-ui/react-slot';\nimport { ReactNode, ComponentProps, memo } from 'react';\nimport { cn } from '@/lib/utils';\n\nfunction H1Component({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h1'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h1';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 text-center text-2xl font-extrabold tracking-tight text-balance sm:text-3xl md:text-4xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction H2Component({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h2'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h2';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 pb-2 text-xl font-semibold tracking-tight sm:text-2xl md:text-3xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction H3Component({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h3'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h3';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 text-lg font-semibold tracking-tight sm:text-xl md:text-2xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction H4Component({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h4'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h4';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 text-base font-semibold tracking-tight sm:text-lg md:text-xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction H5Component({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h5'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h5';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 text-base font-semibold tracking-tight sm:text-lg md:text-xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction H6Component({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'h6'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'h6';\n  return (\n    <Comp\n      className={cn(\n        'scroll-m-20 text-base font-semibold tracking-tight sm:text-lg md:text-xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction PComponent({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'p'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'p';\n  return (\n    <Comp\n      className={cn('text-sm leading-6 sm:text-base md:leading-7', className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction BlockQuoteComponent({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'blockquote'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'blockquote';\n  return (\n    <Comp\n      className={cn(\n        'mt-4 border-l-2 pl-4 text-sm italic sm:mt-6 sm:pl-6 sm:text-base',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction CodeComponent({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'code'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'code';\n  return (\n    <Comp\n      className={cn(\n        'bg-muted relative rounded px-[0.2rem] py-[0.15rem] font-mono text-xs font-semibold sm:px-[0.3rem] sm:py-[0.2rem] sm:text-sm',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction LeadComponent({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'span'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      className={cn(\n        'text-muted-foreground text-lg sm:text-xl md:text-2xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction LargeComponent({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'span'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      className={cn('text-base font-semibold sm:text-lg md:text-xl', className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction SmallComponent({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'span'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      className={cn('text-xs leading-none font-medium sm:text-sm', className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction MutedComponent({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'span'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      className={cn('text-muted-foreground text-xs sm:text-sm', className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction TitleComponent({\n  asChild = false,\n  children,\n  className,\n  ...props\n}: ComponentProps<'div'> & {\n  asChild?: boolean;\n  children: ReactNode;\n}) {\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn(\n        'text-primary text-5xl sm:text-6xl md:text-7xl lg:text-8xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nconst H1 = memo(H1Component);\nconst H2 = memo(H2Component);\nconst H3 = memo(H3Component);\nconst H4 = memo(H4Component);\nconst H5 = memo(H5Component);\nconst H6 = memo(H6Component);\nconst P = memo(PComponent);\nconst BlockQuote = memo(BlockQuoteComponent);\nconst Code = memo(CodeComponent);\nconst Lead = memo(LeadComponent);\nconst Large = memo(LargeComponent);\nconst Small = memo(SmallComponent);\nconst Muted = memo(MutedComponent);\nconst Title = memo(TitleComponent);\n\nexport {\n  H1,\n  H2,\n  H3,\n  H4,\n  H5,\n  H6,\n  P,\n  BlockQuote,\n  Code,\n  Lead,\n  Large,\n  Small,\n  Muted,\n  Title,\n};\n",
      "type": "registry:ui",
      "target": "components/ui-bloom/typography.tsx"
    }
  ]
}