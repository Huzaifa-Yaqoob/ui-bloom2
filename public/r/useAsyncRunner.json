{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "useAsyncRunner",
  "type": "registry:hook",
  "title": "useAsyncRunner Hook",
  "description": "hook is a reusable utility for executing async functions with built-in state management for loading, success, failure, and error handlingâ€”all fully type-safe without using any.",
  "files": [
    {
      "path": "src/registry/hooks/useAsyncRunner.ts",
      "content": "'use client';\n\nimport { useState } from 'react';\n\ntype AsyncCallback<Args extends unknown[] = [], Return = void> = (\n  ...args: Args\n) => Promise<Return>;\n\ntype UseAsyncRunnerParams<Args extends unknown[], Return> = {\n  action: AsyncCallback<Args, Return>;\n};\n\nfunction useAsyncRunner<Args extends unknown[], Return>({\n  action,\n}: UseAsyncRunnerParams<Args, Return>) {\n  const [isPending, setIsPending] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [isFailure, setIsFailure] = useState(false);\n  const [data, setData] = useState<Return | null>(null);\n  const [error, setError] = useState<unknown>(null);\n\n  const run = async (...args: Args): Promise<Return | undefined> => {\n    setIsPending(true);\n    setIsSuccess(false);\n    setIsFailure(false);\n    setData(null);\n    setError(null);\n\n    try {\n      const result = await action(...args);\n      setData(result);\n      setIsSuccess(true);\n      return result;\n    } catch (err) {\n      setError(err);\n      setIsFailure(true);\n      return undefined;\n    } finally {\n      setIsPending(false);\n    }\n  };\n\n  return {\n    run,\n    isPending,\n    isSuccess,\n    isFailure,\n    data,\n    error,\n  };\n}\n\nexport { useAsyncRunner };\n",
      "type": "registry:hook"
    }
  ]
}